using BinaryProvider, Libdl # requires BinaryProvider 0.3.0 or later

## NOTE: This is not a typical build.jl file; it has extra stuff toward the bottom.
## Don't just replace this file with the output of a BinaryBuilder repository!

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libscsindir"], :indirect),
    LibraryProduct(prefix, ["libscsdir"], :direct),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaOpt/SCSBuilder/releases/download/v2.0.2-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-gnu-gcc4.tar.gz", "ec6d05d3234233f6657430526ce3d9363247ef581b2e116edfc7601463412350"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-gnu-gcc7.tar.gz", "e25291e8ab567e5ad2c6e10d9a6d98060a38b29fee949b30aa16cde94a3c15e9"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-gnu-gcc8.tar.gz", "eb7a759514addc0df3a8273ee710ae4b6553fb56084b0ced0f6ca995a80bc1a0"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-musl-gcc4.tar.gz", "04d19b162c0b75fad38055d08f39adee867fd0dce529ad9d54305ca721a72c15"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-musl-gcc7.tar.gz", "588e0b68cc4bc758611b5f63f0db5d6f0c1ccd3c5655764fd5f4e4931c0657d1"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-musl-gcc8.tar.gz", "662f0a2b06129a73e0649a88f55d1a600e47b8780371e2bffeb8bcb91c4d2284"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-gnueabihf-gcc4.tar.gz", "3f786cd9f59fc14afc13fddadb59a8065e6e16a1bdc5b70f4a715eb81031ed94"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-gnueabihf-gcc7.tar.gz", "0a32bf05d42eecbd8adb18907770f7b96f3766d612e84242de943b1ae315813e"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-gnueabihf-gcc8.tar.gz", "14aa62ea6be9de8f51a3caf2aed67fe4246d8f62683266419e0df9c2f8e8123d"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-musleabihf-gcc4.tar.gz", "ab95141b6be69bbafda0677b6a9b690e26764b027cc6120c88959d3ffeb2a750"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-musleabihf-gcc7.tar.gz", "40da0e4cb5fa4091df80389016c657662070d8a259e2122b8d1d88d92bb52d43"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-musleabihf-gcc8.tar.gz", "f641ad07a34d64b88afdbf8cf3eab4d3a89941b7f609982270370c85ce2c60da"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-gnu-gcc4.tar.gz", "1a209b4af0b0d6d99756866218e76ffdc3ea8a4ab5fecface65cdfc1cdc7fbc6"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-gnu-gcc7.tar.gz", "e4291e2e9357d16bd12af5db595c38e4e3948dda0d2b2483051872cbfbe521d7"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-gnu-gcc8.tar.gz", "b4f5e02553d7f5c463f93394988886e5450bc250938b5e77c86cafc20f2d6eb0"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-musl-gcc4.tar.gz", "257a8f52d1a1b783de4b4658c4f522f7251ffea5ea2ad0c63d48af1b140b4994"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-musl-gcc7.tar.gz", "74e53ae86ffcaf010f368b4dc886def4de63bd6501fd4d387dc01cfe04715df5"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-musl-gcc8.tar.gz", "e61959902ac0ec3c23f6152df6eefd3de338c13440605205cd3a5a414e490127"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-w64-mingw32-gcc4.tar.gz", "557625016e349c622b6d5fa8c088140c8046b78fe255cfaae58dbc639959c3b9"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-w64-mingw32-gcc7.tar.gz", "ae8481792619466fd1b788be0b9fcbfa2291417f9ac05c053cc589917e3f1d0b"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-w64-mingw32-gcc8.tar.gz", "5cf67d8c2d9b4afc6d0f705efb51bde30aa85ed47570dd21a1ecae98c821df39"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.powerpc64le-linux-gnu-gcc4.tar.gz", "7b0bcd7acbfc5787fb19a16fba0c7a46d95b6303b981dac92b0b97e869a55c57"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.powerpc64le-linux-gnu-gcc7.tar.gz", "1c28819d1460d385a739d1fda73fbd3e8a588eeec0a2cba335603a5caff35490"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.powerpc64le-linux-gnu-gcc8.tar.gz", "58e8074744bdde66c7f93586f9f0b9fa70c52886133377b00fe995b889d011e7"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-apple-darwin14-gcc4.tar.gz", "6aa0a601cc0788182be6f276f08b900327be09445b8693a64251d24682d52682"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-apple-darwin14-gcc7.tar.gz", "257f353a747419a8112863d9b4aaddb76d5ad22df8b763085a49c66e8ad17c37"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-apple-darwin14-gcc8.tar.gz", "de7effdb148d59fdfc616e6bbe802863e74da6b752957c85703e13654f0c9efe"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-gnu-gcc4.tar.gz", "f845bd78dba7e79eac5df236848bd7fc26f6f52488887815616499812ba5f464"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-gnu-gcc7.tar.gz", "c7d053b129a9e2d05aec96918f6ad1b883c6532fb22b90257e360c51b60657fd"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-gnu-gcc8.tar.gz", "505e0e9a4ec170a9bab0f8643869e6bf13f9cfc3aabfc24200889ecd5d0d793c"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-musl-gcc4.tar.gz", "9ee509f9740f62c70e3649ba1551b75b3fb4ac1bb7f38202ade1cbc15da638b3"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-musl-gcc7.tar.gz", "784c63d5559b918eafbf2fa5cd6d6e2e0d00f478b84fd7c23845d336a8595d87"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-musl-gcc8.tar.gz", "5e0275a174ee271e1560f3fb5337ea3fe41bf67ea63f3e7d5378c446f9c1e566"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-unknown-freebsd11.1-gcc4.tar.gz", "05aec099dfe94aeb2c7e34fcd561545e5db9124609337290a1014438d448d51f"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-unknown-freebsd11.1-gcc7.tar.gz", "8161741b6acd17c973ce10c354dbe3c40d345db43701bf07f9b3948e8a20711a"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-unknown-freebsd11.1-gcc8.tar.gz", "09832832008cd0b48f9dc38788747b2ebf48042c558a6856b718be44c35678ac"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-w64-mingw32-gcc4.tar.gz", "10f7c43ef4c0e4d5ddd7083c8f9e8bc4ca8165331b342b3da8557fd9acdb514e"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-w64-mingw32-gcc7.tar.gz", "1d84cbe7c21d13f377a9bf3ab99710a2593737a212793b4bec7956d55fdc4d98"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-w64-mingw32-gcc8.tar.gz", "9556564f6cf613da50bd6812376e10f61202eb045dfe54ae1c91fda86060fa70"),
)


this_platform = platform_key_abi()
                  
custom_library = false
if haskey(ENV,"JULIA_SCS_LIBRARY_PATH")
    custom_products = [LibraryProduct(ENV["JULIA_SCS_LIBRARY_PATH"],product.libnames,product.variable_name) for product in products]
    if all(satisfied(p; verbose=verbose) for p in custom_products)
        products = custom_products
        custom_library = true
    else
        error("Could not install custom libraries from $(ENV["JULIA_SCS_LIBRARY_PATH"]).\nTo fall back to BinaryProvider call delete!(ENV,\"JULIA_SCS_LIBRARY_PATH\") and run build again.")
    end
end        
                                   
if !custom_library
    # Install unsatisfied or updated dependencies:
    unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)

    dl_info = choose_download(download_info, this_platform)
    if dl_info === nothing && unsatisfied
        # If we don't have a compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
    end

    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
               
 end
                    
# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
